{"name":"OpenCalendarSync","tagline":"A tool to help you manage calendar imports on various calendar services, such as Outlook and Google Calendar.","body":"Releases\r\n============\r\n\r\nA list of releases can be found [here](https://github.com/Shevraar/OpenCalendarSync/releases)\r\n\r\n___\r\n\r\nSystem Requirements\r\n===================\r\n\r\n| Requirement | Download |\r\n|-------------|----------|\r\n| .Net Framework 4.5 | http://www.microsoft.com/en-US/download/details.aspx?id=30653 |\r\n| MongoDB | http://www.mongodb.org/downloads |\r\n\r\n### Notes\r\n\r\nYou will need to setup MongoDB accordingly to http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/ or to http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/#manually-create-windows-service otherwise the library won't work.\r\n\r\nAlso, to compile the library you'll also have to install http://msdn.microsoft.com/en-us/library/15s06t57.aspx (Microsoft Office Interop Assemblies) which are used by the OutlookCalendarManager to interact with Outlook and its calendar service.\r\n\r\n___\r\n\r\nHow the code works\r\n============\r\nEach calendar \"manager\" derives from the basic ``ICalendarManager``, that forces you to implement various generic functions:\r\n\r\n* ``Push``\r\n* ``Pull`` and ``Pull`` with begin date and end date.\r\n* and their **Async** versions (``PushAsync`` and ``PullAsync``).\r\n\r\n### Simple usage\r\nEach calendar manager provides an instance (singleton) that lets you pull their calendar into a GenericCalendar object, which is then pushable inside a new calendar manager, without any further modifications:\r\n\r\n```C#\r\n// take events from outlook and push em to google\r\nvar calendar = await OutlookCalendarManager.Instance.PullAsync() as GenericCalendar;\r\nvar isLoggedIn = await GoogleCalendarManager.Instance.Initialize(\"your-google-client-id\", \"your-google-client-secret\", \"your-calendar-name\");\r\nif (isLoggedIn) //logged in to google, go on!\r\n{\r\n\tvar ret = await GoogleCalendarManager.Instance.PushAsync(calendar);\r\n\tif (ret) Log.Info(\"Success\");\r\n}\r\n```\r\n### Subscription\r\n\r\nIf you want to integrate your application inside a service or whatsoever a timed event is provided by using a subscribing policy:\r\n\r\n```C#\r\nvar isLoggedIn = await GoogleCalendarManager.Instance.Initialize(\"your-google-client-id\", \"your-google-client-secret\", \"your-calendar-name\");\r\nOutlookCalendarManager.Instance.Subscribers = new List<ICalendarManager>\r\n\t{\r\n\t\tGoogleCalendarManager.Instance\r\n\t};\r\nif (isLoggedIn) { OutlookCalendarManager.Instance.StartLookingForChanges(TimeSpan.FromSeconds(10)); }\r\n```\r\n\r\n``OutlookCalendarManager`` now holds a list of subscribed calendar managers and every **N** milliseconds/seconds/minutes/hours/whatever (see arguments for ``StartLookingForChanges``)  it will look for changes inside their managed calendar and push the changes inside their subsribed calendar managers.\r\n\r\nStatus\r\n======\r\n\r\n* **Outlook** => **Google** calendar import works successfully.\r\n* **Google** => **Outlook** calendar import are not yet implemented.\r\n\r\nContribute\r\n==========\r\n\r\nIf you have any calendar service you would like to implement feel free to contribute.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}